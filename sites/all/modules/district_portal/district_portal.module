<?php
define('DISTRICT_PORTAL_VERSION', '7.x-0.1');
error_reporting(E_ALL);
ini_set('display_errors', 1);
/**
 * @file
 * Module file for district_portal.
 */

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function district_portal_block_info() {
  // This hook returns an array, each component of which is an array of block
  // information. The array keys are the 'delta' values used in other block
  // hooks.
  //
  // The required block information is a block description, which is shown
  // to the site administrator in the list of possible blocks. You can also
  // provide initial settings for block weight, status, etc.
  //
  // Many options are defined in hook_block_info():

  // This sample shows how to provide default settings. In this case we'll
  // enable the block in the first sidebar and make it visible only on
  // 'node/*' pages. See the hook_block_info() documentation for these.
  $blocks['district_portal_slide_show'] = array(
    'info' => t('User Profile'),
    'status' => TRUE,
    'region' => 'sidebar_second',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'user',
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 *
 * This hook declares configuration options for blocks provided by this module.
 */
function district_portal_block_configure($delta = '') {
  $form = array();
  // The $delta parameter tells us which block is being configured.
  // In this example, we'll allow the administrator to customize
  // the text of the 'configurable text string' block defined in this module.
  if ($delta == 'district_portal_slide_show') {
    // All we need to provide is the specific configuration options for our
    // block. Drupal will take care of the standard block configuration options
    // (block title, page visibility, etc.) and the save button.
    $form['district_portal_string'] = array(
      '#type' => 'textfield',
      '#title' => t('Block contents'),
      '#size' => 60,
      '#description' => t('This text will appear in the example block.'),
      '#default_value' => variable_get('district_portal_string',
        t('TODO: Basic Structure(Theme, SlideShow, Initial Blocks).')),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 *
 * This hook declares how the configured options for a block
 * provided by this module are saved.
 */
function district_portal_block_save($delta = '', $edit = array()) {
  // We need to save settings from the configuration form.
  // We need to check $delta to make sure we are saving the right block.
  if ($delta == 'district_portal_slide_show') {
    // Have Drupal save the string to the database.
    variable_set('district_portal_string', $edit['district_portal_string']);
  }
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function district_portal_block_view($delta = '') {
  // The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'district_portal_slide_show':
      // The subject is displayed at the top of the block. Note that it
      // should be passed through t() for translation. The title configured
      // for the block using Drupal UI supersedes this one.
      $block['subject'] = t('User Account');
      // The content of the block is typically generated by calling a custom
      // function.
      $block['content'] = district_portal_contents($delta);
      break;
  }
  return $block;
}

/**
 * A module-defined block content function.
 */
function district_portal_contents($which_block) {
  switch ($which_block) {
    case 'district_portal_slide_show':
      // Modules would typically perform some database queries to fetch the
      // content for their blocks. Here, we'll just use the variable set in the
      // block configuration or, if none has set, a default value.
      // Block content can be returned in two formats: renderable arrays
      // (as here) are preferred though a simple string will work as well.
      // Block content created through the UI defaults to a string.
      $result = array(
        '#markup' => variable_get('district_portal_string',
          t('A default value. This block was created at %time',
            array('%time' => date('c'))
          )
        ),
      );
      return $result;
  }
}

/**
 * Implements hook_image_default_styles().
 *
 * Adds a new Image Style named "Slide (960x400)" with upscale allowed.
 */
function district_portal_image_default_styles() {
  $styles = array();

  // Default image preset for FlexSlider
  $styles['district_portal_slide_full'] = array(
    'label' => 'Slide (960x400)',
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 1280,
          'height' => 500,
          'upscale' => 1,
        ),
        'weight' => 0
      )
    )
  );

  return $styles;
}

/**
 * Implements hook_block_view_alter().
 *
 * This hook allows you to modify the output of any block in the system.
 *
 * In addition, instead of hook_block_view_alter(), which is called for all
 * blocks, you can also use hook_block_view_MODULE_DELTA_alter() to alter a
 * specific block.
 */
function district_portal_block_view_system_powered_by_alter(&$data, $block) {
  if ($block->theme == 'district_portal') {
    $data['content'] = '';
      // t('Developed by NIC, Paschim Medinipur');
  }

  if ($block->theme == 'recruitment') {
    $data['content'] = t('Designed & Developed by'
      . ' <strong>NIC Paschim Medinipur</strong>');
  }
}

/**
 * Implements hook_views_api().
 */

function district_portal_views_api() {
  return array ('api' => 3.0);
}

function district_portal_views_default_views() {
  // Check for all view file in views directory
  $files = file_scan_directory(drupal_get_path('module', 'district_portal') . '/views', '/.*\.inc$/');

  // Add view to list of views
  foreach ($files as $filepath => $file) {
    require $filepath;
    if (isset($view)) {
      $views[$view->name] = $view;
    }
  }

  // At the end, return array of default views.
  return $views;
}

/**
 * Implements hook_form_alter().
 */

function district_portal_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login_block': // Log-in block form.
    case 'user_login': // Log-in form.
    case 'user_pass': // Request New Password form.
    case 'user_register_form': // Create User form.

      $form['#attributes']['autocomplete'] = 'off';
      // Username
      $form['name']['#attributes']['autocomplete'] = 'off';

      // Password
      $form['pass']['#attributes']['autocomplete'] = 'off';
      break;

    case 'contact_site_form':
      $form['#submit'][] = 'contact_form_submit_handler';
      $form['#attributes']['autocomplete'] = 'off';
      break;

    case 'contact_personal_form':
      $form['#attributes']['autocomplete'] = 'off';
      break;
  }
}

function contact_form_submit_handler(&$form, &$form_state) {
  $form_state['redirect'] = 'contact';
}
/**
 * @} End of "defgroup district_portal".
 */